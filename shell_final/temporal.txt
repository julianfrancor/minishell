int (*function_builtins[]) (char **) = {
	&dirchanger,
	&helper,
	/*&exit,*/
	/*&envbuilt,*/
};
const char *string_builtins[] = {
	"cd",
	"help",
	"exit",
	"env"
};
/**
 * builder - checks whether the command is a builtin or not
 * @cmdpath: commands parsed
 * @iterations: number of iterations of the shell program
 * @argv: arguments obtained form the prompt
 * Return: int 0 on success 1 otherwise
 */
int builder(char **cmdpath, int iterations, char *argv)
{
	int i = 0;

	if (cmdpath[0] == NULL)
	{
	/* An empty command was entered*/
		return (1);
	}
	while (i < 4)
	{
		if (strcmp("env", cmdpath[0]) == 0 || strcmp("printenv", cmdpath[0]) == 0)
			envbuilt();
		if (strcmp("exit", cmdpath[0]) == 0)
		{
			free(cmdpath[0]);
			free(cmdpath);
			exit(EXIT_SUCCESS);
		}
		if (strcmp(cmdpath[0], string_builtins[i]) == 0)
		{
			return ((*function_builtins[i])(cmdpath));
		}
		i++;
	}
	return (execute(cmdpath, iterations, argv));
}

/**
 * dirchanger - function to change directories
 * @args: commands parsed
 * Return: int
 */
int dirchanger(char **args)
{
	int i = 0, lenght = 0;
	char s[1024];

	if (args[1][0] == '-' && !args[1][1])
	{
		chdir(_getenv("OLDPWD")); /*might be != 0*/
		getcwd(s, sizeof(s));
		while (s[i] == '\0')
		{
			lenght++;
			i++;
		}
		s[i] = '\n';
		write(1, s, lenght + 1);
	}
	else if (args[1] != NULL || (args[1][0] == '~' && !args[1][1]))
	{
		chdir(_getenv("HOME"));
	}
	else if (access(args[1], F_OK) == 0)
	{
		chdir(args[1]);
		/*perror(stderr, "Expected argument to \"cd\"\n");*/
	}
	else
	{
		write(1, "Directory not found\n", 22);
	}
	return (1);
}
/**
 * helper - function to display the --help information
 * of a command
 * @args: commands parsed
 * Return: 1
 */
int helper(char **args)
{
	if (!args[1])
	{
		write(1, "Write arguments built-in after help\n", 27);
		return (1);
	}
	else if (strcmp(args[1], "exit") == 0)
	{
		write(1, "help exit\n", 11);
		return (1);
	}
	else if (strcmp(args[1], "cd") == 0)
	{
		write(1, "help cd\n", 9);
		return (0);
	}
	else if (strcmp(args[1], "env") == 0)
	{
		write(1, "help env\n", 10);
		return (0);
	}
	return (1);
}